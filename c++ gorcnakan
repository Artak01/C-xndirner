#include <iostream>

int isPrime(int a){
    for (int i = 2; i <= a / 2; ++i){
        if (a % i == 0){
            return 0;
        }
    }
    return 1;
}

int main()
{
    int num = 0;
    std::cin >> num;
    
    unsigned int counter = 0;
    for (int i = 2; i < num; ++i){
        if (isPrime(i)){
            ++counter;
        }
    }

    int* ptr = new int[counter];

    int index = 0;
    for (int i = 2; i < num; ++i){
        if (isPrime(i)){
            ptr[index++] = i;
        }
    }

    for (int i = 0; i < counter; ++i){
        std::cout <<  ptr[i] << " ";
    }
    delete [] ptr;
}



matric zug 2, kent 1


  #include <iostream>

int main()
{
    int n = 0;
    int m = 0;
    std::cout << "n = ";
    std::cin >> n;
    std::cout << "m = ";
    std::cin >> m;
    
    int** mat = new int*[n];
    for(int i = 0; i < n; ++i){
        mat[i] = new int[m];
    }
    
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
            if((i+j)%2 == 0){
                mat[i][j] = 2;
            }
            else
                mat[i][j] = 1;
        }
    }
    
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
          std::cout << mat[i][j] << " ";  
        }
        std::cout << "\n";
    }
    
    for(int i = 0; i < n; ++i){
       delete [] mat[i];
    }
    
    delete mat;
    return 0;
}



zuygy ajman karqov kenty navzman


#include <iostream>

int main()
{
    int n = 0;
    int m = 0;
    std::cout << "n = ";
    std::cin >> n;
    std::cout << "m = ";
    std::cin >> m;
    
    int** mat = new int*[n];
    for(int i = 0; i < n; ++i){
        mat[i] = new int[m];
    }
    
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
            if(i %2 == 0){
                mat[i][j] = j+1;
            }
            else{
                mat[i][j] = n-j;
            }
        }
    }
    
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
          std::cout << mat[i][j] << " ";  
        }
        std::cout << "\n";
    }
    
    for(int i = 0; i < n; ++i){
       delete [] mat[i];
    }
    
    delete mat;
    return 0;
}


structuraa familyy

#include <iostream>

struct car{
    std::string model;
    int price;
};

struct person{
    std::string name;
    int age;
    int cars_count;
    car* cars;
};

struct family{
    person* persons;
    int person_count;
};

int main()
{
    int count = 0;
    std::cout << "Family count: ";
    std::cin >> count;
    
    family* fam = new family[count];
    
    for(int i = 0; i < count; ++i){
        std::cout << "Person count: ";
        std::cin >> fam[i].person_count;
        fam[i].persons = new person[fam[i].person_count];
        
        for(int j = 0; j < fam[i].person_count; ++j){
            std::cout << "Name: ";
            std::cin >> fam[i].persons[j].name;
            std::cout << "Age: ";
            std::cin >> fam[i].persons[j].age;
            std::cout << "Cars count: ";
            std::cin >> fam[i].persons[j].cars_count;
            fam[i].persons[j].cars = new car[fam[i].persons[j].cars_count];
            
            for(int k = 0; k < fam[i].persons[j].cars_count; ++k){
                std::cout << "Model: ";
                std::cin >> fam[i].persons[j].cars[k].model;
                std::cout << "Price: ";
                std::cin >> fam[i].persons[j].cars[k].price;
            
            }
        }
    }
    
    for(int i = 0; i < count; ++i){
        for(int j = 0; j < fam[i].person_count; ++j){
            for(int k = 0; k < fam[i].persons[j].cars_count; ++k){
                if (fam[i].persons[j].age < 18){
                    delete  fam[i].persons[j].cars;
                }
            }
        }
    }
    
    for(int i = 0; i < count; ++i){
        for(int j = 0; j < fam[i].person_count; ++j){
            for(int k = 0; k < fam[i].persons[j].cars_count; ++k){
                std::cout << "\nname:-> " << fam[i].persons[j].name << "\nage:-> " <<
                fam[i].persons[j].age << "\nmodel:-> " << fam[i].persons[j].cars[k].model
                << "\nprice:-> " << fam[i].persons[j].cars[k].price;
            }
        }
    }
    
    delete [] fam;
    return 0;
}



parz tver dymenic arrayaa

#include <iostream>

struct car{
    std::string model;
    int price;
};

struct person{
    std::string name;
    int age;
    int cars_count;
    car* cars;
};

struct family{
    person* persons;
    int person_count;
};

int main()
{
    int count = 0;
    std::cout << "Family count: ";
    std::cin >> count;
    
    family* fam = new family[count];
    
    for(int i = 0; i < count; ++i){
        std::cout << "Person count: ";
        std::cin >> fam[i].person_count;
        fam[i].persons = new person[fam[i].person_count];
        
        for(int j = 0; j < fam[i].person_count; ++j){
            std::cout << "Name: ";
            std::cin >> fam[i].persons[j].name;
            std::cout << "Age: ";
            std::cin >> fam[i].persons[j].age;
            std::cout << "Cars count: ";
            std::cin >> fam[i].persons[j].cars_count;
            fam[i].persons[j].cars = new car[fam[i].persons[j].cars_count];
            
            for(int k = 0; k < fam[i].persons[j].cars_count; ++k){
                std::cout << "Model: ";
                std::cin >> fam[i].persons[j].cars[k].model;
                std::cout << "Price: ";
                std::cin >> fam[i].persons[j].cars[k].price;
            
            }
        }
    }
    
    for(int i = 0; i < count; ++i){
        for(int j = 0; j < fam[i].person_count; ++j){
            for(int k = 0; k < fam[i].persons[j].cars_count; ++k){
                if (fam[i].persons[j].age < 18){
                    delete  fam[i].persons[j].cars;
                }
            }
        }
    }
    
    for(int i = 0; i < count; ++i){
        for(int j = 0; j < fam[i].person_count; ++j){
            for(int k = 0; k < fam[i].persons[j].cars_count; ++k){
                std::cout << "\nname:-> " << fam[i].persons[j].name << "\nage:-> " <<
                fam[i].persons[j].age << "\nmodel:-> " << fam[i].persons[j].cars[k].model
                << "\nprice:-> " << fam[i].persons[j].cars[k].price;
            }
        }
    }
    
    delete [] fam;
    return 0;
}
